# makepkg.conf
# modified from /etc/makepkg.conf on manjaro linux.

PACKAGER="Idigo Luwum (Scientist. Inventor. Entrepreneur. ðŸŒ¹) <luwum@pm.me>"
GPGKEY="B8DB66A774CF4216"

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('file::/usr/bin/curl -gqC - -o %o %u'
          'ftp::/usr/bin/curl -gqfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -gqb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -gqb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

VCSCLIENTS=('git::git'
            'hg::mercurial'
            'svn::subversion'
            'bzr::bzr'
            'cvs::cvs')

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Defaults: BUILDENV=(!distcc color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
BUILDENV=(!distcc color ccache check sign)
#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Default: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables

OPTIONS=(strip docs !libtool staticlibs zipman emptydirs purge debug)
#-- File integrity checks to use. Valid: md5, sha1, sha256, sha384, sha512
INTEGRITY_CHECKS=(md5 sha256 sha384 sha512 b2)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,share/}{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR="/usr/src/debug"
#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
PKGDEST="${XDG_CACHE_HOME}/pkg"
#-- Source cache: specify a fixed directory where source files will be cached
SCRDEST="${XDG_CACHE_HOME}/src"
#-- Source packages: specify a fixed directory where all src packages will be placed
SRCPKGDEST="${XDG_DATA_HOME}/pkg"
#-- Log files: specify a fixed directory where all log files will be placed
LOGDEST=""
#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
CARCH='x86_64'
CHOST="x86_64-pc-linux-gnu"
#-- Compiler and Linker Flags
# -march (or -mcpu) builds exclusively for an architecture
# -mtune optimizes for an architecture, but builds for whole processor family
CPPFLAGS="${CPPFLAGS}"
CFLAGS="${CFLAGS} -march=native -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt"
CXXFLAGS="${CXXFLAGS} -march=native -mtune=generic -O2 -pipe -fstack-protector-strong -fno-plt"
#-- Make Flags: change this for DistCC/SMP systems
MAKEFLAGS="-j$(($(nproc)+1))"
LDFLAGS="${LDFLAGS}"
RUSTFLAGS="${RUSTFLAGS}"

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(pigz -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z - --threads=0)
COMPRESSZST=(zstd -c -z - --threads=0)
COMPRESSLZO=(lzop -q)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZ4=(lz4 -q)
#COMPRESSZ=(compress -c -f)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT=".pkg.tar.zst"
SRCEXT=".src.tar.gz"
